// Roll your own Array.prototype.slice() method
function slicey(array, firstIndex, lastIndex){
  var output = [];

  if ( lastIndex === undefined || lastIndex > array.length - 1 ) {
    lastIndex = array.length;
  }
  else if ( lastIndex < 0 ){
    lastIndex = array.length - lastIndex; // haven't test this yet, but I looks good. 
  }
  else if ( firstIndex === undefined ){
    firstIndex = 0;
  }
  else if ( firstIndex < 0 ){
    firstIndex = array.length + firstIndex;
  }

  for (var i = firstIndex; i < lastIndex; i++){
    output.push(array[i]);
  }
  return output;
}

var testArray = [1,2,3,4,5];

// console.log(testArray.slice(1,3));
// console.log(slicey(testArray, 1,3)); // expect the same output as the line above


// Roll your own Array.prototype.concat() method
function conCat(original, toAdd){
  var output = [];
  for (var i = 0; i < original.length; i++){
    output.push(original[i]);
  }
  for (var j = 0; j < toAdd.length; j++) {
    output.push(toAdd[j])
  }
  if ( toAdd.length === undefined ){
    output.push(toAdd);
  }
  return output;
}

//Here's another approach for toString that accepts any amount of arguments:
function concat2(array){
  var output = [];
  for(var x=0;x<arguments.length;x++){
    if (Array.isArray(arguments[x])) {
      for (var i=0;i<arguments[x].length;i++){
        output.push(arguments[x][i]);
      }
    } else {
      output.push(arguments[x]);
    }
  }
  return output;
}

// test cases
var new1 = [1,2,3,4,5];
var new2 = [6,7,8,9,10];
var new3 = [['f'], 'g'];
var new4 = {thing: "awesome"}; 

// console.log(conCat(new1, new2)); // ✅
// console.log(conCat(new1, new3)); // ✅
// console.log(conCat(new1, new4)); // ✅
// console.log(concat2(new1, new4)); // ✅

// Roll your own Array#include? method (from Ruby) to Javascript
function includedInArray(arrayToInspect, token){
  counter = 0;
  for (var i = 0; i < arrayToInspect.length; i++) {
    if (arrayToInspect[i] === token){
      counter++;
    }
  }
  return (counter > 0) ? true : false;
} 

// console.log(includedInArray(new1, 3)) // expect true
// console.log(includedInArray(new1, 7)) // expect false
// console.log(includedInArray(new2, 7)) // expect true


//Roll your own Array.prototype.toString function
function toString(array, token){
  var output="";
  if (token === undefined){
    token = ",";
  }
  for (var i = 0; i < array.length; i++) {
    output += array[i] + "" + token;
  }
  return output.substring(0, output.length -1);
}

var example1 = ['This', 'Is', 'An', 'Array', 'Of', 'Strings'];
var example2 = [1,2,3,4,5];

// console.log(toString(example1)); // expect "This,Is,An,Array,Of,Strings"
// console.log(toString(example2)); // expect "1,2,3,4,5"






